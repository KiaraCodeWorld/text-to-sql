# Environment Setup
# .env file - rename to .env and fill in your values

DB_HOST=localhost
DB_PORT=5432
DB_NAME=postgres
DB_USER=postgres
DB_PASSWORD=your_password
OPENAI_API_KEY=your_openai_api_key
LLM_API_KEY=your_llm_api_key  # Can be the same as OPENAI_API_KEY

# Requirements
# requirements.txt

gradio>=4.0.0
langchain>=0.1.0
pandas>=2.0.0
psycopg2-binary>=2.9.0
python-dotenv>=1.0.0
openai>=1.0.0
pgvector>=0.2.0
langchain-postgres>=0.0.1

# Database Setup
# db_setup.sql

-- Enable pgvector extension if not already enabled
CREATE EXTENSION IF NOT EXISTS vector;

-- Create a new table for storing embeddings
CREATE TABLE IF NOT EXISTS langchain_pg_embedding (
    uuid UUID PRIMARY KEY,
    collection_id TEXT,
    embedding vector(1536),  -- Adjust dimension based on your embeddings
    document TEXT,
    custom_id TEXT,
    metadata JSONB
);

-- Create an index for faster similarity search
CREATE INDEX IF NOT EXISTS langchain_pg_embedding_collection_id_idx ON langchain_pg_embedding (collection_id);
CREATE INDEX IF NOT EXISTS langchain_pg_embedding_metadata_idx ON langchain_pg_embedding USING GIN (metadata);

-- For vector search performance
CREATE INDEX IF NOT EXISTS langchain_pg_embedding_vector_idx ON langchain_pg_embedding USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- Sample table for testing (uncomment and modify as needed)
/*
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10, 2),
    category VARCHAR(50)
);

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(customer_id),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10, 2)
);

CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(order_id),
    product_id INTEGER REFERENCES products(product_id),
    quantity INTEGER,
    item_price DECIMAL(10, 2)
);

INSERT INTO customers (name, email) VALUES
    ('John Doe', 'john@example.com'),
    ('Jane Smith', 'jane@example.com'),
    ('Bob Johnson', 'bob@example.com');

INSERT INTO products (name, price, category) VALUES
    ('Laptop', 1200.00, 'Electronics'),
    ('Smartphone', 800.00, 'Electronics'),
    ('Headphones', 150.00, 'Electronics'),
    ('Office Chair', 250.00, 'Furniture'),
    ('Desk', 350.00, 'Furniture');

INSERT INTO orders (customer_id, total_amount) VALUES
    (1, 1200.00),
    (2, 950.00),
    (3, 1550.00),
    (1, 350.00);

INSERT INTO order_items (order_id, product_id, quantity, item_price) VALUES
    (1, 1, 1, 1200.00),
    (2, 2, 1, 800.00),
    (2, 3, 1, 150.00),
    (3, 1, 1, 1200.00),
    (3, 3, 1, 150.00),
    (3, 5, 1, 200.00),
    (4, 4, 1, 250.00),
    (4, 5, 1, 100.00);
*/
